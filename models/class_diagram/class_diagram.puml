@startuml

title MOD4B - Class Diagram

package application {

  class MainApplication {
    --
    + main(args: String[]): void
  }

  class Simulation {
    --
    + Simulation(userInput: Scanner)
    + start(): void
  }

  package userInterface {

    class UserInputManager << (S,#FF7700) Singleton >> {
        - {static} ui_instance: UserInputManager
        - userInput: Scanner
        --
        - UserInputManager()
        + {static} getInstance(): UserInputManager
        + readOptionInteger(minInteger: int, maxInteger: int): int
        + readOptionChar(nbOptions: int): char
        + convertCharOptionToArrayID(charOption: char): int
    }

      package menus {

        enum MenuType {
            MAIN
            RUNWAY
            WAITING_PLANES
            ADVANCE_HOUR
            REQUEST
        }

        abstract Menu {
          - menuType: MenuType
          --
          + Menu(MenuType menuType)
          # liveMenu(): void
          # printMenuToOutput(): void
          # goToMainMenu(): void
          # {abstract} displayMenu(): String
          # {abstract} handleOptions(): void
        }

        class MainMenu extends Menu {
          --
          + MainMenu()
          + displayMenu(): String
          + handleOptions(): void
          + areRequestsDone(): boolean
        }

        class RunwayMenu extends Menu {
            --
            + RunwayMenu()
            + displayMenu(): String
            + handleOptions(): void
        }

        class WaitingPlanesMenu extends Menu {
            --
            + WaitingPlanesMenu()
            + displayMenu(): String
            + handleOptions(): void
            - selectPlaneToLand(): void
        }

        class AdvanceHourMenu extends Menu {
            --
            + AdvanceHourMenu()
            + displayMenu(): String
            + handleOptions(): void
            - advanceHourDatas(): void
        }

        class RequestMenu extends Menu {
            --
            + RequestMenu()
            + displayMenu(): String
            + handleOptions(): void
        }

      }
  }
  
  package logic {

    class Tools {
        --
        + {static} generateRandomNumber(int minimum, int maximum): int
    }

    package simulationRequests {

        class SimulationRequestsManager << (S,#FF7700) Singleton >> {
            - {static} simulationRequestsManager_instance: SimulationRequestsManager
            - simulationRequests: ArrayList<SimulationRequests>
            --
            - SimulationRequestsManager()
            + {static} getInstance(): SimulationRequestsManager
            + getNbRequestsCurrentHour(): int
            + getNbRequestsCurrentHour(): int
            + areAllCurentHourRequestsDone(): boolean
            + startRequestCurrentHour(idRequest: int): void
            + displayRequestsNameCurrentHour(): String
        }

        class SimulationRequests {
            - hourRequests: ArrayList<Request>
            + {static} NB_MAX_REQUESTS: int
            --
            + SimulationRequests()
            + getNbRequests(): int
            + areAllRequestsDone(): boolean
            + startRequest(idRequest: int)): void
            + deleteRequest(request: Request): void
            + displayRequestsName(): String
        }
      }

      package runways {

        class RunwayManager << (S,#FF7700) Singleton >> {
            - {static} runwayManager_instance: RunwayManager
            - runways: Runway[8]
            - INFINITY: int
            - NB_RUNWAYS: int
            --
            - RunwayManager()
            + {static} getInstance(): RunwayManager
            + displayRunway(): String
            + planeLandOnFreeRunway(plane: Plane): void
            + advanceHourAllRunways(): void
            + areAllRunwaysFull(): boolean
            + getNbFullRunway(): int
            + getNbFreeRunway(): int
            + emptyRandomRunway(): void
            + removeRunway(): void
            + addTimeBlockedAllPlanes(hoursToWait: int)
            + blockFreeRunway(occupantName: String, hoursBlocked: int): void
        }

        enum RunwayStatus {
            FREE
            OCCUPIED
            BLOCKED
        }

        class Runway {
          - runwayStatus: RunwayStatus
          - occupantName: String
          - timeBlocked: int
          --
          # Runway()
          # planeLand(plane: Plane): void
          # advanceHourRunway(): void
          # decreaseTimeBlocked(): void
          # increaseTimeBlocked(hoursTimeBlocked: int): void
          # displayRunway(): String
          - checkTimeBlocked(): boolean
          # emptyRunway(): void
          # blockRunway(occupantName: String, hoursBlocked: int): void
          # getRunwayStatus(): RunwayStatus
        }
      }

      package waitingPlanes {

        class WaitingPlanesManager << (S,#FF7700) Singleton >> {
            - {static} waitingPlanesManager_instance: WaitingPlanesManager
            - waitingPlanes: ArrayList<Plane>
            --
            - WaitingPlanesManager()
            + {static} getInstance(): WaitingPlanesManager
            + addPlaneToWaitingPlanes(plane: Plane): void
            + waitingPlanesAdvanceHour(): int
            + decreaseWaitingPlanesFuel(): void
            + increaseWaitingPlanesFuel(fuel: int): void
            - checkWaitingPlanesFuel(): ArrayList<Plane>
            + crashWaitingPlane(crashingPlane: Plane): void
            - numberDeadPassengersFromCrash(crashingPlane: Plane): int
            + getNbWaitingPlanes(): int
            + getRandomWaitingPlane(): Plane
        }
      }

      package planes {

        class PlaneManager << (S,#FF7700) Singleton >> {
            - {static} planeManager_instance: PlaneManager
            - planesDictionary: EnumMap<PlaneType, stack<Plane>>
            --
            - PlaneManager()
            + {static} getInstance(): PlaneManager
            - generateCommonPlane(planeID: int): Plane
            - generateEmergencyPlane(planeID: int): Plane
            - generateJumboPlane(planeID: int): Plane
            - generateSnakePlane(planeID: int): Plane
            + giveCommonPlane(): Plane
            + giveEmergencyPlane(): Plane
            + giveJumboPlane(): Plane
            + giveSnakesPlane(): Plane
        }

        enum PlaneType {
            COMMON
            EMERGENCY
            JUMBO
            SNAKES
        }

        class Plane {
            - planeType: PlaneType
            - name: String
            - hoursFuelLeft: int
            - hoursRunwayNeeded: int
            - nbPassengers: int
            --
            # Plane(planeType: PlaneType, name: String, hoursFuelLeft: int, hoursRunwayNeeded: int, nbPassengers: int)
            # getPlaneType(): PlaneType
            + getName(): String
            + getHoursFuelLeft(): int
            + getHoursRunwayNeeded(): int
            + getNbPassengers(): int
            + decreaseFuelLeft(): void
            + increaseFuelLeft(fuel: int): void
            # decreaseHoursRunwayNeeded(): void
            # increaseHoursRunwayNeeded(): void
            # displayPlane(): String
        }
      }

      package passengers {

        class DeadPassengerCountManager << (S,#FF7700) Singleton >> {
            - {static} deadPassengerCountManager_instance: DeadPassengerCountManager
            - nbDeadPassengers: int
            --
            - DeadPassengerCountManager()
            + {static} getInstance(): DeadPassengerCountManager
            + isGameOver(): boolean
            + getNbDeadPassengers(): int
            + addDeadPassengers(nbDeadPassengersFromCrash: int): void
            + decreaseDeadPassengers(nbRescuedPassengers: int)
        }
      }

      package requests {

          abstract Request {
            - TITLE: String
            - DESCRIPTION: String
            # Plane plane
            - options: Option[]
            --
            # Request(TITLE: String, DESCRIPTION: String, Plane plane)
            # {abstract} generateOptions(): Option[]
            + displayRequest(): String
            + getNbOptions(): int
            + isOptionDoable(): boolean
            + doOption(): void
          }

          abstract Landing extends Request {
            - plane: Plane
            --
            # Landing(TITLE: String, DESCRIPTION: String, plane: Plane)
            # generateOptions(): Option[]
          }

          class PlaneLanding extends Landing {
            --
            + PlaneLanding(plane: Plane)
            - {static} generateDescription(plane: Plane): String
          }

          class EmergencyLanding extends Landing {
            --
            + EmergencyLanding(plane: Plane)
            - {static} generateDescription(plane: Plane): String
          }

          class FundingEvent extends Request {
            --
            # FundingEvent()
            # generateOptions(): Option[]
          }

          class JumboJet extends Landing {
            --
            + JumboJet(plane: Plane)
            - {static} generateDescription(plane: Plane): String
          }

          class BadWeather extends Request {
            --
            # BadWeather()
            # generateOptions(): Option[]
          }

          class SnakesOnThePlane extends Request {
            --
            # SnakesOnThePlane()
            # generateOptions(): Option[]
          }

          class Protests extends Request {
            --
            # Protests()
            # generateOptions(): Option[]
          }

          class JohnMcClain extends Request {
            --
            # JohnMcClain()
            # generateOptions(): Option[]
          }

          enum RequestType {
            PLANE_LANDING
            EMERGENCY_LANDING
            FUNDING_EVENT
            JUMBO_JET
            BAD_WEATHER
            SNAKES_ON_THE_PLANE
            PROTESTS
            JOHN_MCCLAIN
          }
        }

        package options {

          abstract Option {
            - DESCRIPTION: String
            - CONSEQUENCES: String
            --
            # Option(DESCRIPTION: String)
            + {abstract} checkRequirement(): Boolean
            + {abstract} applyConsequence(): void
            + displayOption(): String
          }

          class AllowLanding extends Option {
            - plane: Plane
            - runwayManager_instance: RunwayManager
            --
            + AllowLanding(plane: Plane)
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class PlaceOnStandby extends Option {
            - plane: Plane
            - waitingPlanesManager_instance: WaitingPlanesManager
            --
            + PlaceOnStandby(plane: Plane)
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class EmptyRandomRunway extends Option {
            - runwayManager_instance: RunwayManager
            --
            + EmptyRandomRunway()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class RescueTeam extends Option {
            - deadPassengerCountManager_instance: DeadPassengerCountManager
            --
            + RescueTeam()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class AirRefueling extends Option {
            - waitingPlanesManager_instance: WaitingPlanesManager
            --
            + AirRefueling()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class CrossWinds extends Option {
            - waitingPlanesManager_instance: WaitingPlanesManager
            --
            + CrossWinds()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class IcyRunWays extends Option {
            - runwayManager_instance: RunwayManager
            --
            + IcyRunWays()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class IceStorm extends Option {
            - runwayManager_instance: RunwayManager
            --
            + IceStorm()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class LetThemLand extends Option {
            - plane: Plane
            - runwayManager_instance: RunwayManager
            --
            + LetThemLand(plane: Plane)
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class RefuseThem extends Option {
            - deadPassengerCountManager_instance: DeadPassengerCountManager
            --
            + RefuseThem()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class AllowThemTheSpaceToProtest extends Option {
            - runwayManager_instance: RunwayManager
            --
            + AllowThemTheSpaceToProtest()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class GetPoliceInvolved extends Option {
            - runwayManager_instance: RunwayManager
            --
            + GetPoliceInvolved()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class LetThePlanesLandAnyways extends Option {
            - deadPassengerCountManager_instance: DeadPassengerCountManager
            --
            + LetThePlanesLandAnyways()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class LockdownTheRunway extends Option {
            - runwayManager_instance: RunwayManager
            --
            + LockdownTheRunway()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class LetTheManGo extends Option {
            - deadPassengerCountManager_instance: DeadPassengerCountManager
            - waitingPlanesManager_instance: WaitingPlanesManager
            --
            + LetTheManGo()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

        }
  }



  MainApplication "1" *-- "1" Simulation
  Menu ..> UserInputManager : use
  Request "1..3" -up-o "1" SimulationRequests
  Request "1..*" o-- "2..*" Option
  Runway "0..1" o-- "0..1" Plane

  PlaneManager "1" *-- "*" Plane
  PlaneManager *-- PlaneType
  Plane "*" *-- "1" PlaneType

  Simulation ..> UserInputManager : use
  Simulation ..> DeadPassengerCountManager : use
  Simulation ..> SimulationRequestsManager : use
  Simulation ..> RunwayManager : use
  Simulation ..> WaitingPlanesManager : use

  Landing ..> PlaneManager : use

  MenuManager "1" *-- "*" MenuType
  MenuManager *-- Menu

  Menu "*" -right- "1" MenuType

  SimulationRequestsManager "1" *-- "24" SimulationRequests
  RunwayManager "1" *-- "8" Runway
  WaitingPlanesManager "0..1" *-- "*" Plane

}

@enduml
