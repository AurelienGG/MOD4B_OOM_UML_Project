@startuml

title MOD4B - Class Diagram

package application {

  class MainApplication {
    --
    + main(args: String[]): void
    + startSimulation(userInput: Scanner)
  }

  class Simulation {
    --
    + Simulation(userInput: Scanner)
  }

  package userInterface {

    class UserInputManager << (S,#FF7700) Singleton >> {
        - {static} ui_instance: UserInputManager
        - userInput: Scanner
        --
        - UserInputManager()
        + {static} getInstance(): UserInputManager
    }

      package menus {

        class MenuManager << (S,#FF7700) Singleton >> {
            - {static} menuManager_instance: MenuManager
            - menusDictionary: EnumMap<MenuType, Menu>
            --
            - MenuManager()
            + {static} getInstance(): MenuManager
        }

        enum MenuType {
            + {static} MAIN = 0
            + {static} RUNWAY = 1
            + {static} WAITING_PLANES = 2
            + {static} ADVANCE_HOUR = 3
            + {static} REQUEST = 4
        }

        abstract Menu {
          - menuType: MenuType
          --
          {abstract} + goToMenu(Menu menu): void
          {abstract} + displayMenu(): String
          + printMenuToOutput(): void
        }

        class MainMenu extends Menu {
          --
          + MainMenu()
          + advanceHour(): void
          + goToMenu(Menu menu): void
          + displayMenu(): String
        }

        class RunwayMenu extends Menu {
            --
            + RunwayMenu()
            + goToMenu(Menu menu): void
            + displayMenu(): String
        }

        class WaitingPlanesMenu extends Menu {
            --
            + WaitingPlanesMenu()
            + goToMenu(Menu menu): void
            + displayMenu(): String
        }

        class AdvanceHourMenu extends Menu {
            --
            + AdvanceHourMenu()
            + goToMenu(Menu menu): void
            + displayMenu(): String
        }

        class RequestMenu extends Menu {
            --
            + RequestMenu()
            + goToMenu(Menu menu): void
            + displayMenu(): String
        }

      }
  }
  
  package logic {

    package simulationHour {

        class SimulationHourManager << (S,#FF7700) Singleton >> {
            - {static} simulationHourManager_instance: SimulationHourManager
            - simulationHours: SimulationHour[24]
            --
            - SimulationHourManager()
            + {static} getInstance(): SimulationHourManager
            - initialiseSimulationHours(): void
            - generateRandomNumberRequest(int maximum): int
            - generateRandomRequest(): Request
        }

        class SimulationHour {
            - currentHour: int
            - requests: ArrayList<Request>
            --
            + startRequest(request: Request): void
            + hourSummary(): String
        }
      }

      package runways {

        class RunwayManager << (S,#FF7700) Singleton >> {
            - {static} runwayManager_instance: RunwayManager
            - runways: Runway[8]
            --
            - RunwayManager()
            + {static} getInstance(): RunwayManager
        }

        class Runway {
          - occupied: boolean
          - holderPlane: Plane
          --
          + planeLand(Plane plane): void
          + decreasePlaneHoursRunwayNeeded(): void
          + displayRunway(): String
          - checkPlaneFuelLevel(): void
          - planeLeave(): void
        }
      }

      package waitingPlanes {

        class WaitingPlanesManager << (S,#FF7700) Singleton >> {
            - {static} waitingPlanesManager_instance: WaitingPlanesManager
            - waitingPlanes: ArrayList<Plane>
            --
            - WaitingPlanesManager()
            + {static} getInstance(): WaitingPlanesManager
            + addPlaneToWaitingPlanes(Plane plane): void
        }
      }

      package planes {

        class PlaneManager << (S,#FF7700) Singleton >> {
            - {static} planeManager_instance: PlaneManager
            - planesDictionary: EnumMap<PlaneType, stack<Plane>>
            --
            - PlaneManager()
            + {static} getInstance(): PlaneManager
            - generateCommonPlane(): Plane
            - generateEmergencyPlane(): Plane
            - generateJumboPlane(): Plane
        }

        enum PlaneType {
            + {static} COMMON = 0
            + {static} EMERGENCY = 1
            + {static} JUMBO = 2
        }

        class Plane {
            - planeType: PlaneType
            - name: String
            - hoursFuelLeft: int
            - hoursRunwayNeeded: int
            - nbPassengers: int
            --
            + displayPlane(): String
        }
      }

      package passengers {

        class DeadPassengerCountManager << (S,#FF7700) Singleton >> {
            - {static} deadPassengerCountManager_instance: DeadPassengerCountManager
            - nbDeadPassengers: int
            --
            - DeadPassengerCountManager()
            + {static} getInstance(): DeadPassengerCountManager
        }
      }

      package requests {

          abstract Request {
            - RARITY: Double
            - TITLE: String
            - DESCRIPTION: String
            - options: Option[]
            --
            # Request(double RARITY, String TITLE, String DESCRIPTION, Option[] options)
          }

          abstract Landing extends Request {
            - plane: Plane
            --
            # Landing(double RARITY, String TITLE, String DESCRIPTION, Option[] options, Plane plane)
          }

          class PlaneLanding extends Landing {
            - plane: Plane
            - RARITY: Double = 0.40
            - TITLE: String = "Plane Landing"
            - DESCRIPTION: String = ...
          }

          class EmergencyLanding extends Landing {
            - plane: Plane
            - RARITY: Double = 0.05
            - TITLE: String = "Emergency landing"
            - DESCRIPTION: String = ...
          }

          class FundingEvent extends Request {
            - RARITY: Double = 0.10
            - TITLE: String = "Funding Event"
            - DESCRIPTION: String = ...
            - options: Option[] = ...
          }

          class JumboJet extends Landing {
            - plane: Plane
            - RARITY: Double = 0.15
            - TITLE: String = "Jumbo jet"
            - DESCRIPTION: String = ...
          }

          class BadWeather extends Request {
            - RARITY: Double = 0.10
            - TITLE: String = "Bad Weather"
            - DESCRIPTION: String = ...
            - options: Option[] = ...
          }

          class SnakesOnThePlane extends Request {
            - RARITY: Double = 0.10
            - TITLE: String = "Snakes on the plane"
            - DESCRIPTION: String = ...
            - options: Option[] = ...
          }

          class Protests extends Request {
            - RARITY: Double = 0.05
            - TITLE: String = "Protests"
            - DESCRIPTION: String = ...
            - options: Option[] = ...
          }

          class JohnMcClain extends Request {
            - RARITY: Double = 0.05
            - TITLE: String = "John McClain"
            - DESCRIPTION: String = ...
            - options: Option[] = ...
          }
        }

        package options {

          abstract Option {
            - DESCRIPTION: String
            --
            # Option()
            {abstract} + checkRequirement(): Boolean
            {abstract} + applyConsequence(): void
            + displayOption(): String
          }

          class AllowLanding extends Option {
            --
            + AllowLanding()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class PlaceOnStandby extends Option {
            --
            + PlaceOnStandby()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class EmptyRandomRunway extends Option {
            --
            + EmptyRandomRunway()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class RescueTeam extends Option {
            --
            + RescueTeam()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class AirRefueling extends Option {
            --
            + AirRefueling()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class CrossWinds extends Option {
            --
            + CrossWinds()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class IcyRunWays extends Option {
            --
            + IcyRunWays()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class IceStorm extends Option {
            --
            + IceStorm()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class LetThemLand extends Option {
            --
            + LetThemLand()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class RefuseThem extends Option {
            --
            + RefuseThem()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class AllowThemTheSpaceToProtest extends Option {
            --
            + AllowThemTheSpaceToProtest()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class GetPoliceInvolved extends Option {
            --
            + GetPoliceInvolved()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class LetThePlanesLandAnyways extends Option {
            --
            + LetThePlanesLandAnyways()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class LockdownTheRunway extends Option {
            --
            + LockdownTheRunway()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

          class LetTheManGo extends Option {
            --
            + LetTheManGo()
            + checkRequirement(): boolean
            + applyConsequence(): void
          }

        }
  }



  MainApplication "1" *-- "1" Simulation
  Menu ..> UserInputManager : use
  Request "1..3" -up-o "1" SimulationHour
  Request "1..*" o-- "2..*" Option
  Runway "0..1" o-- "0..1" Plane

  PlaneManager "1" *-- "*" Plane
  PlaneManager *-- PlaneType
  Plane "*" *-- "1" PlaneType

  Simulation ..> UserInputManager : use
  Simulation ..> DeadPassengerCountManager : use
  Simulation ..> SimulationHourManager : use
  Simulation ..> RunwayManager : use
  Simulation ..> WaitingPlanesManager : use

  Landing ..> PlaneManager : use

  MenuManager "1" *-- "*" MenuType
  MenuManager *-- Menu

  Menu "*" -right- "1" MenuType

  SimulationHourManager "1" *-- "24" SimulationHour
  RunwayManager "1" *-- "8" Runway
  WaitingPlanesManager "0..1" *-- "*" Plane

}

@enduml
